ggtsdisplay(serie_diferenciada)
modelo <- Arima(serie, order = c(3,1,3))
checkresiduals(modelo)
tseries::jarque.bera.test(modelo$residuals)
pronostico_modelo1 = forecast(modelo, h = 10, level = c(90), fan = FALSE)
autoplot(pronostico_modelo1) + autolayer(pronostico_modelo1)
library(ggplot2)
par(mfrow=c(1,2))
plot(pronostico_modelo1, xlim=c(700,725), ylim=c(12,15))
plot(serie_prueba["2024-09-30/2024-10-18"])
library(readr)
NU_Historical_Data <- read_csv("NU Historical Data.csv")
data <- data.frame(NU_Historical_Data$Date, NU_Historical_Data$Price)
data$NU_Historical_Data.Date <- as.Date(data$NU_Historical_Data.Date, format = "%m/%d/%Y")
library(xts)
serie_prueba <- xts(data[, -1], order.by = data$NU_Historical_Data.Date)
serie <- serie_prueba["2021-12-10/2024-10-08"] #Eliminando los ultimos 10 dias de la serie
plot(serie, type="l", col="blue", main="Serie de Tiempo", xlab="Tiempo", ylab="Valor")
plot.ts(diff(serie), col="blue", main="Serie de Tiempo", xlab="Tiempo", ylab="Valor")
library(forecast)
lambda_optimo <- round(BoxCox.lambda(serie, method=c("guerrero"), lower=-2, upper=2), 2)
lambda_optimo
serie_transformada <- BoxCox(serie, lambda_optimo)
plot(serie_transformada, type="l", col="blue", main="Serie Transformada (Box-Cox)",
xlab="Tiempo", ylab="Valor Transformado")
plot.ts(diff(serie_transformada), col="blue", main="Serie de Tiempo", xlab="Tiempo", ylab="Valor")
library(urca)
df_prueba <- ur.df(serie, type = "trend", lags = 1)
summary(df_prueba)
serie_diferenciada <- na.omit(diff(serie))
df_prueba_diff <- ur.df(serie_diferenciada, type = "none", lags = 1)
summary(df_prueba_diff)
ggtsdisplay(serie_diferenciada)
modelo <- Arima(serie, order = c(3,1,3))
checkresiduals(modelo)
tseries::jarque.bera.test(modelo$residuals)
pronostico_modelo1 = forecast(modelo, h = 10, level = c(90), fan = FALSE)
autoplot(pronostico_modelo1) + autolayer(pronostico_modelo1)
library(ggplot2)
par(mfrow=c(1,2))
plot(pronostico_modelo1, xlim=c(700,725), ylim=c(12,15))
plot(serie_prueba["2024-09-30/2024-10-18"])
# Dividiendo la serie en entrenamiento y prueba
n_entrenamiento <- floor(length(serie)*0.8)
conjunto_entrenamiento <- serie[1:n_entrenamiento]
conjunto_prueba <- serie[(n_entrenamiento + 1):length(serie)]
# Creando una función para calcular el MAPE, RMSE y MAE
calcular_error <- function(real, pronosticado){
error <- real - pronosticado
mape <- mean(abs(error/real))
rmse <- sqrt(mean(error^2))
mae <- mean(abs(error))
return(c(mape, rmse, mae))
}
# Creando una función para calcular el mejor modelo
mejor_modelo <- function(serie, p, d, q){
modelo <- Arima(serie, order = c(p,d,q))
pronostico <- forecast(modelo, h = length(conjunto_prueba))
error <- calcular_error(conjunto_prueba, pronostico$mean)
return(c(p,d,q,error))
}
# Comparando metricas de los modelos
lista_modelos <- list(c(0,1,0), c(1,1,1), c(2,1,2), c(3,1,3), c(4,1,4))
resultados <- data.frame(Modelo = character(), MAPE_entrenamiento = numeric(), RMSE_entrenamiento = numeric(),
MAE_entrenamiento = numeric(), MAPE_prueba = numeric(), RMSE_prueba = numeric(),
MAE_prueba = numeric(), stringsAsFactors = FALSE)
for (i in lista_modelos){
# Ajustar el modelo en el conjunto de entrenamiento
modelo <- Arima(conjunto_entrenamiento, order = i)
# Predicción en conjunto de entrenamiento
ajuste_entrenamiento <- fitted(modelo)
metricas_entrenamiento <- calcular_metricas(conjunto_entrenamiento, ajuste_entrenamiento)
# Predicción en conjunto de prueba
pronostico_prueba <- forecast(modelo, h = length(conjunto_prueba))
metricas_prueba <- calcular_metricas(conjunto_prueba, pronostico_prueba$mean)
# Guardar los resultados
resultados <- rbind(resultados, data.frame(Modelo = paste("ARIMA", orden, sep = ""),
MAPE_entrenamiento = metricas_entrenamiento[1],
RMSE_entrenamiento = metricas_entrenamiento[2],
MAE_entrenamiento = metricas_entrenamiento[3],
MAPE_prueba = metricas_prueba[1],
RMSE_prueba = metricas_prueba[2],
MAE_prueba = metricas_prueba[3]))
}
# Dividiendo la serie en entrenamiento y prueba
n_entrenamiento <- floor(length(serie)*0.8)
conjunto_entrenamiento <- serie[1:n_entrenamiento]
conjunto_prueba <- serie[(n_entrenamiento + 1):length(serie)]
# Creando una función para calcular el MAPE, RMSE y MAE
calcular_error <- function(real, pronosticado){
error <- real - pronosticado
mape <- mean(abs(error/real))
rmse <- sqrt(mean(error^2))
mae <- mean(abs(error))
return(c(mape, rmse, mae))
}
# Creando una función para calcular el mejor modelo
mejor_modelo <- function(serie, p, d, q){
modelo <- Arima(serie, order = c(p,d,q))
pronostico <- forecast(modelo, h = length(conjunto_prueba))
error <- calcular_error(conjunto_prueba, pronostico$mean)
return(c(p,d,q,error))
}
# Comparando metricas de los modelos
lista_modelos <- list(c(0,1,0), c(1,1,1), c(2,1,2), c(3,1,3), c(4,1,4))
resultados <- data.frame(Modelo = character(), MAPE_entrenamiento = numeric(), RMSE_entrenamiento = numeric(),
MAE_entrenamiento = numeric(), MAPE_prueba = numeric(), RMSE_prueba = numeric(),
MAE_prueba = numeric(), stringsAsFactors = FALSE)
for (i in lista_modelos){
# Ajustar el modelo en el conjunto de entrenamiento
modelo <- Arima(conjunto_entrenamiento, order = i)
# Predicción en conjunto de entrenamiento
ajuste_entrenamiento <- fitted(modelo)
metricas_entrenamiento <- calcular_error(conjunto_entrenamiento, ajuste_entrenamiento)
# Predicción en conjunto de prueba
pronostico_prueba <- forecast(modelo, h = length(conjunto_prueba))
metricas_prueba <- calcular_error(conjunto_prueba, pronostico_prueba$mean)
# Guardar los resultados
resultados <- rbind(resultados, data.frame(Modelo = paste("ARIMA", orden, sep = ""),
MAPE_entrenamiento = metricas_entrenamiento[1],
RMSE_entrenamiento = metricas_entrenamiento[2],
MAE_entrenamiento = metricas_entrenamiento[3],
MAPE_prueba = metricas_prueba[1],
RMSE_prueba = metricas_prueba[2],
MAE_prueba = metricas_prueba[3]))
}
# Dividiendo la serie en entrenamiento y prueba
n_entrenamiento <- floor(length(serie)*0.8)
conjunto_entrenamiento <- serie[1:n_entrenamiento]
conjunto_prueba <- serie[(n_entrenamiento + 1):length(serie)]
# Creando una función para calcular el MAPE, RMSE y MAE
calcular_error <- function(real, pronosticado){
error <- real - pronosticado
mape <- mean(abs(error/real))
rmse <- sqrt(mean(error^2))
mae <- mean(abs(error))
return(c(mape, rmse, mae))
}
# Creando una función para calcular el mejor modelo
mejor_modelo <- function(serie, p, d, q){
modelo <- Arima(serie, order = c(p,d,q))
pronostico <- forecast(modelo, h = length(conjunto_prueba))
error <- calcular_error(conjunto_prueba, pronostico$mean)
return(c(p,d,q,error))
}
# Comparando metricas de los modelos
lista_modelos <- list(c(0,1,0), c(1,1,1), c(2,1,2), c(3,1,3), c(4,1,4))
resultados <- data.frame(Modelo = character(), MAPE_entrenamiento = numeric(), RMSE_entrenamiento = numeric(),
MAE_entrenamiento = numeric(), MAPE_prueba = numeric(), RMSE_prueba = numeric(),
MAE_prueba = numeric(), stringsAsFactors = FALSE)
for (order in lista_modelos){
# Ajustar el modelo en el conjunto de entrenamiento
modelo <- Arima(conjunto_entrenamiento, order = order)
# Predicción en conjunto de entrenamiento
ajuste_entrenamiento <- fitted(modelo)
metricas_entrenamiento <- calcular_error(conjunto_entrenamiento, ajuste_entrenamiento)
# Predicción en conjunto de prueba
pronostico_prueba <- forecast(modelo, h = length(conjunto_prueba))
metricas_prueba <- calcular_error(conjunto_prueba, pronostico_prueba$mean)
# Guardar los resultados
resultados <- rbind(resultados, data.frame(Modelo = paste("ARIMA", orden, sep = ""),
MAPE_entrenamiento = metricas_entrenamiento[1],
RMSE_entrenamiento = metricas_entrenamiento[2],
MAE_entrenamiento = metricas_entrenamiento[3],
MAPE_prueba = metricas_prueba[1],
RMSE_prueba = metricas_prueba[2],
MAE_prueba = metricas_prueba[3]))
}
# Convietiendo la serie en una serie de tiempo
serie <- as.ts(serie)
# Dividiendo la serie en entrenamiento y prueba
n_entrenamiento <- floor(length(serie)*0.8)
conjunto_entrenamiento <- serie[1:n_entrenamiento]
conjunto_prueba <- serie[(n_entrenamiento + 1):length(serie)]
# Creando una función para calcular el MAPE, RMSE y MAE
calcular_error <- function(real, pronosticado){
error <- real - pronosticado
mape <- mean(abs(error/real))
rmse <- sqrt(mean(error^2))
mae <- mean(abs(error))
return(c(mape, rmse, mae))
}
# Creando una función para calcular el mejor modelo
mejor_modelo <- function(serie, p, d, q){
modelo <- Arima(serie, order = c(p,d,q))
pronostico <- forecast(modelo, h = length(conjunto_prueba))
error <- calcular_error(conjunto_prueba, pronostico$mean)
return(c(p,d,q,error))
}
# Comparando metricas de los modelos
lista_modelos <- list(c(0,1,0), c(1,1,1), c(2,1,2), c(3,1,3), c(4,1,4))
resultados <- data.frame(Modelo = character(), MAPE_entrenamiento = numeric(), RMSE_entrenamiento = numeric(),
MAE_entrenamiento = numeric(), MAPE_prueba = numeric(), RMSE_prueba = numeric(),
MAE_prueba = numeric(), stringsAsFactors = FALSE)
for (order in lista_modelos){
# Ajustar el modelo en el conjunto de entrenamiento
modelo <- Arima(conjunto_entrenamiento, order = order)
# Predicción en conjunto de entrenamiento
ajuste_entrenamiento <- fitted(modelo)
metricas_entrenamiento <- calcular_error(conjunto_entrenamiento, ajuste_entrenamiento)
# Predicción en conjunto de prueba
pronostico_prueba <- forecast(modelo, h = length(conjunto_prueba))
metricas_prueba <- calcular_error(conjunto_prueba, pronostico_prueba$mean)
# Guardar los resultados
resultados <- rbind(resultados, data.frame(Modelo = paste("ARIMA", orden, sep = ""),
MAPE_entrenamiento = metricas_entrenamiento[1],
RMSE_entrenamiento = metricas_entrenamiento[2],
MAE_entrenamiento = metricas_entrenamiento[3],
MAPE_prueba = metricas_prueba[1],
RMSE_prueba = metricas_prueba[2],
MAE_prueba = metricas_prueba[3]))
}
# Convietiendo la serie en una serie de tiempo
serie <- as.ts(serie)
# Dividiendo la serie en entrenamiento y prueba
n_entrenamiento <- floor(length(serie)*0.8)
conjunto_entrenamiento <- serie[1:n_entrenamiento]
conjunto_prueba <- serie[(n_entrenamiento + 1):length(serie)]
# Creando una función para calcular el MAPE, RMSE y MAE
calcular_error <- function(real, pronosticado){
error <- real - pronosticado
mape <- mean(abs(error/real))
rmse <- sqrt(mean(error^2))
mae <- mean(abs(error))
return(c(mape, rmse, mae))
}
# Creando una función para calcular el mejor modelo
mejor_modelo <- function(serie, p, d, q){
modelo <- Arima(serie, order = c(p,d,q))
pronostico <- forecast(modelo, h = length(conjunto_prueba))
error <- calcular_error(conjunto_prueba, pronostico$mean)
return(c(p,d,q,error))
}
# Comparando metricas de los modelos
lista_modelos <- list(c(0,1,0), c(1,1,1), c(2,1,2), c(3,1,3), c(4,1,4))
resultados <- data.frame(Modelo = character(), MAPE_entrenamiento = numeric(), RMSE_entrenamiento = numeric(),
MAE_entrenamiento = numeric(), MAPE_prueba = numeric(), RMSE_prueba = numeric(),
MAE_prueba = numeric(), stringsAsFactors = FALSE)
for (i in lista_modelos){
# Ajustar el modelo en el conjunto de entrenamiento
modelo <- Arima(conjunto_entrenamiento, order = i)
# Predicción en conjunto de entrenamiento
ajuste_entrenamiento <- fitted(modelo)
metricas_entrenamiento <- calcular_error(conjunto_entrenamiento, ajuste_entrenamiento)
# Predicción en conjunto de prueba
pronostico_prueba <- forecast(modelo, h = length(conjunto_prueba))
metricas_prueba <- calcular_error(conjunto_prueba, pronostico_prueba$mean)
# Guardar los resultados
resultados <- rbind(resultados, data.frame(Modelo = paste("ARIMA", i, sep = ""),
MAPE_entrenamiento = metricas_entrenamiento[1],
RMSE_entrenamiento = metricas_entrenamiento[2],
MAE_entrenamiento = metricas_entrenamiento[3],
MAPE_prueba = metricas_prueba[1],
RMSE_prueba = metricas_prueba[2],
MAE_prueba = metricas_prueba[3]))
}
resultados
resultados
# Convietiendo la serie en una serie de tiempo
serie <- as.ts(serie)
# Dividiendo la serie en entrenamiento y prueba
n_entrenamiento <- floor(length(serie)*0.8)
conjunto_entrenamiento <- serie[1:n_entrenamiento]
conjunto_prueba <- serie[(n_entrenamiento + 1):length(serie)]
# Creando una función para calcular el MAPE, RMSE y MAE
calcular_error <- function(real, pronosticado){
error <- real - pronosticado
mape <- mean(abs(error/real))
rmse <- sqrt(mean(error^2))
mae <- mean(abs(error))
return(c(mape, rmse, mae))
}
# Creando una función para calcular el mejor modelo
mejor_modelo <- function(serie, p, d, q){
modelo <- Arima(serie, order = c(p,d,q))
pronostico <- forecast(modelo, h = length(conjunto_prueba))
error <- calcular_error(conjunto_prueba, pronostico$mean)
return(c(p,d,q,error))
}
# Comparando metricas de los modelos
lista_modelos <- list(c(0,1,0), c(1,1,1), c(2,1,2), c(3,1,3), c(4,1,4))
resultados <- data.frame(Modelo = character(), MAPE_entrenamiento = numeric(), RMSE_entrenamiento = numeric(),
MAE_entrenamiento = numeric(), MAPE_prueba = numeric(), RMSE_prueba = numeric(),
MAE_prueba = numeric(), stringsAsFactors = FALSE)
for (i in lista_modelos){
# Ajustar el modelo en el conjunto de entrenamiento
modelo <- Arima(conjunto_entrenamiento, order = i)
# Predicción en conjunto de entrenamiento
ajuste_entrenamiento <- fitted(modelo)
metricas_entrenamiento <- calcular_metricas(conjunto_entrenamiento, ajuste_entrenamiento)
# Predicción en conjunto de prueba
pronostico_prueba <- forecast(modelo, h = length(conjunto_prueba))
metricas_prueba <- calcular_metricas(conjunto_prueba, pronostico_prueba$mean)
# Guardar los resultados con nombres de modelos únicos
resultados <- rbind(resultados, data.frame(Modelo = paste("ARIMA(", paste(i, collapse = ","), ")", sep = ""),
MAPE_entrenamiento = metricas_entrenamiento[1],
RMSE_entrenamiento = metricas_entrenamiento[2],
MAE_entrenamiento = metricas_entrenamiento[3],
MAPE_prueba = metricas_prueba[1],
RMSE_prueba = metricas_prueba[2],
MAE_prueba = metricas_prueba[3]))
}
# Convietiendo la serie en una serie de tiempo
serie <- as.ts(serie)
# Dividiendo la serie en entrenamiento y prueba
n_entrenamiento <- floor(length(serie)*0.8)
conjunto_entrenamiento <- serie[1:n_entrenamiento]
conjunto_prueba <- serie[(n_entrenamiento + 1):length(serie)]
# Creando una función para calcular el MAPE, RMSE y MAE
calcular_error <- function(real, pronosticado){
error <- real - pronosticado
mape <- mean(abs(error/real))
rmse <- sqrt(mean(error^2))
mae <- mean(abs(error))
return(c(mape, rmse, mae))
}
# Creando una función para calcular el mejor modelo
mejor_modelo <- function(serie, p, d, q){
modelo <- Arima(serie, order = c(p,d,q))
pronostico <- forecast(modelo, h = length(conjunto_prueba))
error <- calcular_error(conjunto_prueba, pronostico$mean)
return(c(p,d,q,error))
}
# Comparando metricas de los modelos
lista_modelos <- list(c(0,1,0), c(1,1,1), c(2,1,2), c(3,1,3), c(4,1,4))
resultados <- data.frame(Modelo = character(), MAPE_entrenamiento = numeric(), RMSE_entrenamiento = numeric(),
MAE_entrenamiento = numeric(), MAPE_prueba = numeric(), RMSE_prueba = numeric(),
MAE_prueba = numeric(), stringsAsFactors = FALSE)
for (i in lista_modelos){
# Ajustar el modelo en el conjunto de entrenamiento
modelo <- Arima(conjunto_entrenamiento, order = i)
# Predicción en conjunto de entrenamiento
ajuste_entrenamiento <- fitted(modelo)
metricas_entrenamiento <- calcular_error(conjunto_entrenamiento, ajuste_entrenamiento)
# Predicción en conjunto de prueba
pronostico_prueba <- forecast(modelo, h = length(conjunto_prueba))
metricas_prueba <- calcular_metricas(conjunto_prueba, pronostico_prueba$mean)
# Guardar los resultados con nombres de modelos únicos
resultados <- rbind(resultados, data.frame(Modelo = paste("ARIMA(", paste(i, collapse = ","), ")", sep = ""),
MAPE_entrenamiento = metricas_entrenamiento[1],
RMSE_entrenamiento = metricas_entrenamiento[2],
MAE_entrenamiento = metricas_entrenamiento[3],
MAPE_prueba = metricas_prueba[1],
RMSE_prueba = metricas_prueba[2],
MAE_prueba = metricas_prueba[3]))
}
# Convietiendo la serie en una serie de tiempo
serie <- as.ts(serie)
# Dividiendo la serie en entrenamiento y prueba
n_entrenamiento <- floor(length(serie)*0.8)
conjunto_entrenamiento <- serie[1:n_entrenamiento]
conjunto_prueba <- serie[(n_entrenamiento + 1):length(serie)]
# Creando una función para calcular el MAPE, RMSE y MAE
calcular_error <- function(real, pronosticado){
error <- real - pronosticado
mape <- mean(abs(error/real))
rmse <- sqrt(mean(error^2))
mae <- mean(abs(error))
return(c(mape, rmse, mae))
}
# Creando una función para calcular el mejor modelo
mejor_modelo <- function(serie, p, d, q){
modelo <- Arima(serie, order = c(p,d,q))
pronostico <- forecast(modelo, h = length(conjunto_prueba))
error <- calcular_error(conjunto_prueba, pronostico$mean)
return(c(p,d,q,error))
}
# Comparando metricas de los modelos
lista_modelos <- list(c(0,1,0), c(1,1,1), c(2,1,2), c(3,1,3), c(4,1,4))
resultados <- data.frame(Modelo = character(), MAPE_entrenamiento = numeric(), RMSE_entrenamiento = numeric(),
MAE_entrenamiento = numeric(), MAPE_prueba = numeric(), RMSE_prueba = numeric(),
MAE_prueba = numeric(), stringsAsFactors = FALSE)
for (i in lista_modelos){
# Ajustar el modelo en el conjunto de entrenamiento
modelo <- Arima(conjunto_entrenamiento, order = i)
# Predicción en conjunto de entrenamiento
ajuste_entrenamiento <- fitted(modelo)
metricas_entrenamiento <- calcular_error(conjunto_entrenamiento, ajuste_entrenamiento)
# Predicción en conjunto de prueba
pronostico_prueba <- forecast(modelo, h = length(conjunto_prueba))
metricas_prueba <- calcular_error(conjunto_prueba, pronostico_prueba$mean)
# Guardar los resultados con nombres de modelos únicos
resultados <- rbind(resultados, data.frame(Modelo = paste("ARIMA(", paste(i, collapse = ","), ")", sep = ""),
MAPE_entrenamiento = metricas_entrenamiento[1],
RMSE_entrenamiento = metricas_entrenamiento[2],
MAE_entrenamiento = metricas_entrenamiento[3],
MAPE_prueba = metricas_prueba[1],
RMSE_prueba = metricas_prueba[2],
MAE_prueba = metricas_prueba[3]))
}
resultados
# Graficando los resultados
library(ggplot2)
library(reshape2)
resultados_grafico <- melt(resultados, id.vars = "Modelo")
resultados_grafico
# Graficando los resultados
library(ggplot2)
library(reshape2)
resultados_grafico <- plot(resultados, aes(x = Modelo, y = MAPE_prueba), geom = "bar", stat = "identity")
# Graficando los resultados
library(ggplot2)
library(reshape2)
plot(resultados, aes(x = Modelo, y = MAPE_prueba), geom = "bar", stat = "identity")
# Graficando los resultados
library(ggplot2)
library(reshape2)
ggplot(melt(resultados[, -1], id.vars = "Modelo"), aes(x = Model, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Comparación de Modelos ARIMA", x = "Modelo", y = "Valor", fill = "Métrica")
resultados[, -1]
resultados
# Graficando los resultados
library(ggplot2)
library(reshape2)
ggplot(melt(resultados, id.vars = "Modelo"), aes(x = Model, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Comparación de Modelos ARIMA", x = "Modelo", y = "Valor", fill = "Métrica")
# Graficando los resultados el pronostico de todos los modelos
par(mfrow=c(2,2))
for (i in 1:nrow(resultados)){
modelo <- Arima(serie, order = lista_modelos[i])
pronostico <- forecast(modelo, h = 10)
plot(pronostico, main = paste("ARIMA(", paste(lista_modelos[i], collapse = ","), ")", sep = ""))
}
# Graficando los resultados el pronostico de todos los modelos
par(mfrow=c(2,2))
for (i in 1:length(lista_modelos)) {
# Extraer el vector de órdenes (p, d, q) del modelo actual
orden <- lista_modelos[[i]]
# Ajustar el modelo ARIMA con el vector de órdenes
modelo <- Arima(serie, order = orden)
# Generar pronóstico
pronostico <- forecast(modelo, h = 10)
# Graficar el pronóstico
plot(pronostico, main = paste("ARIMA(", paste(orden, collapse = ","), ")", sep = ""))
}
# Graficando los resultados el pronostico de todos los modelos
par(mfrow=c(2,2))
for (i in 1:length(lista_modelos)) {
# Extraer el vector de órdenes (p, d, q) del modelo actual
orden <- lista_modelos[[i]]
# Ajustar el modelo ARIMA con el vector de órdenes
modelo <- Arima(serie, order = orden)
# Generar pronóstico
pronostico <- forecast(modelo, h = 10)
# Graficar el pronóstico
plot(pronostico, main = paste("ARIMA(", paste(orden, collapse = ","), ")", sep = ""),
xlim=c(700,725), ylim=c(12,15))
}
# Convietiendo la serie en una serie de tiempo
serie <- as.ts(serie)
# Dividiendo la serie en entrenamiento y prueba
n_entrenamiento <- floor(length(serie)*0.8)
conjunto_entrenamiento <- serie[1:n_entrenamiento]
conjunto_prueba <- serie[(n_entrenamiento + 1):length(serie)]
# Creando una función para calcular el MAPE, RMSE y MAE
calcular_error <- function(real, pronosticado){
error <- real - pronosticado
mape <- mean(abs(error/real))
rmse <- sqrt(mean(error^2))
mae <- mean(abs(error))
return(c(mape, rmse, mae))
}
# Comparando metricas de los modelos
lista_modelos <- list(c(0,1,0), c(1,1,1), c(2,1,1), c(2,1,2), c(1,1,2), c(3,1,1), c(3,1,2), c(3,1,3),
c(4,1,1), c(4,1,2), c(4,1,3), c(4,1,4), c(5,1,1), c(5,1,2), c(5,1,3), c(5,1,4), c(5,1,5))
resultados <- data.frame(Modelo = character(), MAPE_entrenamiento = numeric(), RMSE_entrenamiento = numeric(),
MAE_entrenamiento = numeric(), MAPE_prueba = numeric(), RMSE_prueba = numeric(),
MAE_prueba = numeric(), stringsAsFactors = FALSE)
for (i in lista_modelos){
# Ajustar el modelo en el conjunto de entrenamiento
modelo <- Arima(conjunto_entrenamiento, order = i)
# Predicción en conjunto de entrenamiento
ajuste_entrenamiento <- fitted(modelo)
metricas_entrenamiento <- calcular_error(conjunto_entrenamiento, ajuste_entrenamiento)
# Predicción en conjunto de prueba
pronostico_prueba <- forecast(modelo, h = length(conjunto_prueba))
metricas_prueba <- calcular_error(conjunto_prueba, pronostico_prueba$mean)
# Guardar los resultados con nombres de modelos únicos
resultados <- rbind(resultados, data.frame(Modelo = paste("ARIMA(", paste(i, collapse = ","), ")", sep = ""),
MAPE_entrenamiento = metricas_entrenamiento[1],
RMSE_entrenamiento = metricas_entrenamiento[2],
MAE_entrenamiento = metricas_entrenamiento[3],
MAPE_prueba = metricas_prueba[1],
RMSE_prueba = metricas_prueba[2],
MAE_prueba = metricas_prueba[3]))
}
resultados
# Graficando los resultados el pronostico de todos los modelos
par(mfrow=c(2,2))
for (i in 1:length(lista_modelos)) {
# Extraer el vector de órdenes (p, d, q) del modelo actual
orden <- lista_modelos[[i]]
# Ajustar el modelo ARIMA con el vector de órdenes
modelo <- Arima(serie, order = orden)
# Generar pronóstico
pronostico <- forecast(modelo, h = 10)
# Graficar el pronóstico
plot(pronostico, main = paste("ARIMA(", paste(orden, collapse = ","), ")", sep = ""),
xlim=c(700,725), ylim=c(12,15))
}
install.packages("knitr")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("rlang")
install.packages("rlang")
